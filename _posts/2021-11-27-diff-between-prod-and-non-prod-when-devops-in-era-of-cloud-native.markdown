---
layout: post
title:  云原生时代，DevOps 在测试和生产环境上的差异
date:   2021-11-27
categories: devops, cloud native
---
> 注：这里的“测试环境”为“非生产环境”的统称，略去了开发环境，staging 等。这些环境细分自然有不少差异，但本文重点只想放在与生产环境的差异上。（感觉还挺适合作为面试题的）

前几天和一位朋友聊到这一点，可以挖挖。云原生服务相比于非云原生服务，我认为一个很大的特点是对各个应用服务的不可靠性的容忍程度越来越高，即越来越不在乎某个应用服务是否能正常工作，反而带来整体上的更加可靠，虽然这听上去像个悖论。

一，对稳定性/可靠性/可访问性有差异

1，当我们面对测试环境时，相比于生产，这几个方面的指标明显是降低了的。虽然我认为测试环境理应足够稳定可靠，因为不仅会给一些部门/同事的工作带来影响，同时也能从侧面反映生产环境的健康程度，但，无论是谁，似乎都会自然而然地掉以轻心。所以我的思路是，如何给测试环境配备足够的措施及小工具，从而当出现稳定性可靠性问题时能快速进行恢复。

2，生产环境应当力求不宕机，做到N个9。这里的不宕机体现在不同方面，比如硬件、网络、业务。有了 k8s 加持，基本可以不再害怕硬件宕机。网络会麻烦点，可能涉及DNS解析，带宽受限，区域性的网络故障，遭受攻击等等。云原生时代，云服务商几乎能防范所有网络故障，不是给阿里云打广告，但他们真的做得很不错，像SLB，CDN/DCDN等等服务一旦用过就再也舍不得弃用。业务要做到不宕机，似乎难度更大些，不同的语言，不同的生态，实现方式和难度都有差异，但总体上说，假如能全面做到优雅停机，应该就差不多了。

二，对数据的要求有差异

1，测试环境同时也是个快速试错的环境，所以对数据的认真程度自然而然会降低许多。当涉及存储时，测试环境往往可以直接向分布式存储（Ceph这类）“要”一点空间足矣，但生产环境，考虑到数据的不可丢失，交给更专业的云服务商来处理会更好——虽然形式上也差异不大，仍然是“要”一点空间。

2，从业务的角度看，开发和测试环境的相关参数不一定需要脱敏，但生产就最好如此了，谁也不希望生产的某个密码能被开发人员接触到吧，当然，这也是所谓“关注点分离”的应用之一。

3，数据差异也带来权限划分上的差异。生产数据的权限以最小化、最不方便为原则进行限制，其网络上的划分也必须与其他环境进行隔离。在我的设想中，或许将来的生产环境是多个“租户”的联合，相互之间不仅能隔离，也能随时重组，彼此之间基本没有依赖，反而随时可被摘除。这样的松耦合状态或许可以加强其稳定性和可靠性。

三，对管理流程的要求有差异

即便是一些国内外大厂，也时不时出现因人为操作而大范围宕机的新闻。整个测试环境宕机顶多是整个公司的人跳起来，但生产自然另当别论。那么，如何让管理方式也带有云原生的味道，从而尽量避免P0事件的发生呢？

1，我好几次在生产环境犯错，导致业务中断，虽然影响面很有限，但仍然是生产上的中断。传统的SOP仍然有效，不同人员的介入能避免大部分手误，操作不当等问题。

2，之前说过，云原生一个特点是不担心某个服务失效，那么，是否可能用技术来规避管理问题，做到一种持续性的、小范围的、流程容易复制的形式进行生产发布，同时技术上做到对服务的 failover，从而加强健壮性。

3，测试环境有频繁CI/CD的需求，那么做成一键部署未尝不可。但生产可能要三思，有些操作需要在步骤或权限上进行隔离，防止意外。

4，一些公司使用 chaos monkey 的方式或人为制造故障的方式反复作用于生产环境，来加强生产环境的持续服务能力。这些都是非常好的方式，除了难以在关键节点上应用以外。一个生产环境，终究有一些地方是“单点”或类似单点，一旦 block 就玩完（比如前一阵 facebook 的 BGP 故障）。感觉云原生中的 live migration 是个不错的思路，但可谓世界难题。

测试和生产的差异还有很多，域名，https证书，CI/CD，告警。。。有没有可能，将来各个环境会发展到外观上看不出区别，甚至操作体验上也不容易察觉，而要到某个环节才能明确其归属呢？有没有可能，将来还可以以某种方式实时“替换”，或“丢弃”某个环境呢？这会是 DevOps 的发展方向么？